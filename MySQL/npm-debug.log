0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   'orm' ]
2 info using npm@1.4.3
3 info using node@v0.10.26
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose readDependencies using package.json deps
6 verbose cache add [ 'orm', null ]
7 verbose cache add name=undefined spec="orm" args=["orm",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: 'orm',
8 verbose parsed url   path: 'orm',
8 verbose parsed url   href: 'orm' }
9 silly lockFile e1441726-orm orm
10 verbose lock orm C:\Users\GeOrge\AppData\Roaming\npm-cache\e1441726-orm.lock
11 silly lockFile e1441726-orm orm
12 silly lockFile e1441726-orm orm
13 verbose addNamed [ 'orm', '' ]
14 verbose addNamed [ null, '*' ]
15 silly lockFile 5362f00e-orm orm@
16 verbose lock orm@ C:\Users\GeOrge\AppData\Roaming\npm-cache\5362f00e-orm.lock
17 silly addNameRange { name: 'orm', range: '*', hasData: false }
18 verbose url raw orm
19 verbose url resolving [ 'https://registry.npmjs.org/', './orm' ]
20 verbose url resolved https://registry.npmjs.org/orm
21 info trying registry request attempt 1 at 20:47:48
22 verbose etag "16FAWZW8TUUBBR9E6IAV5T1Y6"
23 http GET https://registry.npmjs.org/orm
24 http 304 https://registry.npmjs.org/orm
25 silly registry.get cb [ 304,
25 silly registry.get   { date: 'Fri, 25 Apr 2014 02:47:45 GMT',
25 silly registry.get     server: 'Apache',
25 silly registry.get     via: '1.1 varnish',
25 silly registry.get     'last-modified': 'Fri, 25 Apr 2014 02:47:45 GMT',
25 silly registry.get     'cache-control': 'max-age=1',
25 silly registry.get     etag: '"16FAWZW8TUUBBR9E6IAV5T1Y6"',
25 silly registry.get     'x-served-by': 'cache-jfk1027-JFK',
25 silly registry.get     'x-cache': 'MISS',
25 silly registry.get     'x-cache-hits': '0',
25 silly registry.get     'x-timer': 'S1398394065.688277960,VS0,VE89',
25 silly registry.get     vary: 'Accept',
25 silly registry.get     'content-length': '0',
25 silly registry.get     'keep-alive': 'timeout=10, max=50',
25 silly registry.get     connection: 'Keep-Alive' } ]
26 verbose etag orm from cache
27 silly addNameRange number 2 { name: 'orm', range: '*', hasData: true }
28 silly addNameRange versions [ 'orm',
28 silly addNameRange   [ '0.1.0',
28 silly addNameRange     '0.1.1',
28 silly addNameRange     '0.1.2',
28 silly addNameRange     '0.1.3',
28 silly addNameRange     '0.1.4',
28 silly addNameRange     '0.1.5',
28 silly addNameRange     '0.1.6',
28 silly addNameRange     '0.1.7',
28 silly addNameRange     '0.1.8',
28 silly addNameRange     '0.1.8-2',
28 silly addNameRange     '0.1.8-3',
28 silly addNameRange     '0.1.8-4',
28 silly addNameRange     '0.1.8-6',
28 silly addNameRange     '0.1.8-7',
28 silly addNameRange     '0.1.8-8',
28 silly addNameRange     '0.1.8-9',
28 silly addNameRange     '0.1.8-10',
28 silly addNameRange     '0.1.8-11',
28 silly addNameRange     '0.1.8-12',
28 silly addNameRange     '2.0.0-alpha1',
28 silly addNameRange     '2.0.0-alpha2',
28 silly addNameRange     '2.0.0-alpha3',
28 silly addNameRange     '2.0.0-alpha4',
28 silly addNameRange     '2.0.0-alpha5',
28 silly addNameRange     '2.0.0-alpha6',
28 silly addNameRange     '2.0.0-alpha7',
28 silly addNameRange     '2.0.0-alpha8',
28 silly addNameRange     '2.0.0-alpha9',
28 silly addNameRange     '2.0.0-alpha10',
28 silly addNameRange     '2.0.0',
28 silly addNameRange     '2.0.1',
28 silly addNameRange     '2.0.2',
28 silly addNameRange     '2.0.3',
28 silly addNameRange     '2.0.4',
28 silly addNameRange     '2.0.5',
28 silly addNameRange     '2.0.6',
28 silly addNameRange     '2.0.7',
28 silly addNameRange     '2.0.8',
28 silly addNameRange     '2.0.9',
28 silly addNameRange     '2.0.10',
28 silly addNameRange     '2.0.11',
28 silly addNameRange     '2.0.12',
28 silly addNameRange     '2.0.13',
28 silly addNameRange     '2.0.14',
28 silly addNameRange     '2.0.15',
28 silly addNameRange     '2.1.0',
28 silly addNameRange     '2.1.1',
28 silly addNameRange     '2.1.2',
28 silly addNameRange     '2.1.3',
28 silly addNameRange     '2.1.4',
28 silly addNameRange     '2.1.5',
28 silly addNameRange     '2.1.6',
28 silly addNameRange     '2.1.7' ] ]
29 verbose addNamed [ 'orm', '2.1.7' ]
30 verbose addNamed [ '2.1.7', '2.1.7' ]
31 silly lockFile b4391c24-orm-2-1-7 orm@2.1.7
32 verbose lock orm@2.1.7 C:\Users\GeOrge\AppData\Roaming\npm-cache\b4391c24-orm-2-1-7.lock
33 silly lockFile b4391c24-orm-2-1-7 orm@2.1.7
34 silly lockFile b4391c24-orm-2-1-7 orm@2.1.7
35 silly lockFile 5362f00e-orm orm@
36 silly lockFile 5362f00e-orm orm@
37 silly resolved [ { author: { name: 'Diogo Resende', email: 'dresende@thinkdigital.pt' },
37 silly resolved     name: 'orm',
37 silly resolved     description: 'NodeJS Object-relational mapping',
37 silly resolved     keywords:
37 silly resolved      [ 'orm',
37 silly resolved        'odm',
37 silly resolved        'database',
37 silly resolved        'mysql',
37 silly resolved        'postgres',
37 silly resolved        'redshift',
37 silly resolved        'sqlite',
37 silly resolved        'mongodb' ],
37 silly resolved     version: '2.1.7',
37 silly resolved     license: 'MIT',
37 silly resolved     homepage: 'http://dresende.github.io/node-orm2',
37 silly resolved     repository: { type: 'git', url: 'http://github.com/dresende/node-orm2.git' },
37 silly resolved     contributors:
37 silly resolved      [ [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object],
37 silly resolved        [Object] ],
37 silly resolved     main: './lib/ORM',
37 silly resolved     scripts: { test: 'make test' },
37 silly resolved     engines: { node: '*' },
37 silly resolved     analyse: false,
37 silly resolved     dependencies:
37 silly resolved      { enforce: '0.1.2',
37 silly resolved        'sql-query': '0.1.16',
37 silly resolved        'sql-ddl-sync': 'git://github.com/dresende/node-sql-ddl-sync.git#v0.3.0',
37 silly resolved        hat: '0.0.3',
37 silly resolved        lodash: '2.4.1' },
37 silly resolved     devDependencies:
37 silly resolved      { mysql: '2.0.0-alpha9',
37 silly resolved        pg: '2.6.2',
37 silly resolved        sqlite3: '2.1.7',
37 silly resolved        async: '*',
37 silly resolved        mocha: '1.13.0',
37 silly resolved        should: '1.2.2',
37 silly resolved        mongodb: '1.3.19',
37 silly resolved        glob: '3.2.8' },
37 silly resolved     optionalDependencies: {},
37 silly resolved     readme: '## Object Relational Mapping\n\n[![Build Status](https://secure.travis-ci.org/dresende/node-orm2.png?branch=master)](http://travis-ci.org/dresende/node-orm2)\n[![](https://badge.fury.io/js/orm.png)](https://npmjs.org/package/orm)\n[![](https://gemnasium.com/dresende/node-orm2.png)](https://gemnasium.com/dresende/node-orm2)\n[![Flattr this git repo](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=dresende&url=https://github.com/dresende/node-orm2&title=ORM&language=&tags=github&category=software)\n\n## Install\n\n```sh\nnpm install orm\n```\n\n## Node.js Version Support\n\nTests are done using [Travis CI](https://travis-ci.org/) for node versions `0.6.x`, `0.8.x` and `0.10.x`. If you want you can run\ntests locally.\n\n```sh\nnpm test\n```\n\n## DBMS Support\n\n- MySQL & MariaDB\n- PostgreSQL\n- Amazon Redshift\n- SQLite\n- MongoDB (beta, missing aggregation for now)\n\n## Features\n\n- Create Models, sync, drop, bulk create, get, find, remove, count, aggregated functions\n- Create Model associations, find, check, create and remove\n- Define custom validations (several builtin validations, check instance properties before saving - see [enforce](http://github.com/dresende/node-enforce) for details)\n- Model instance caching and integrity (table rows fetched twice are the same object, changes to one change all)\n- Plugins: [MySQL FTS](http://dresende.github.io/node-orm-mysql-fts) , [Pagination](http://dresende.github.io/node-orm-paging) , [Transaction](http://dresende.github.io/node-orm-transaction), [Timestamps](http://github.com/SPARTAN563/node-orm-timestamps), [Migrations](https://github.com/locomote/node-migrate-orm2)\n\n## Introduction\n\nThis is a node.js object relational mapping module.\n\nAn example:\n\n```js\nvar orm = require("orm");\n\norm.connect("mysql://username:password@host/database", function (err, db) {\n  if (err) throw err;\n\n\tvar Person = db.define("person", {\n\t\tname      : String,\n\t\tsurname   : String,\n\t\tage       : Number,\n\t\tmale      : Boolean,\n\t\tcontinent : [ "Europe", "America", "Asia", "Africa", "Australia", "Antartica" ], // ENUM type\n\t\tphoto     : Buffer, // BLOB/BINARY\n\t\tdata      : Object // JSON encoded\n\t}, {\n\t\tmethods: {\n\t\t\tfullName: function () {\n\t\t\t\treturn this.name + \' \' + this.surname;\n\t\t\t}\n\t\t},\n\t\tvalidations: {\n\t\t\tage: orm.enforce.ranges.number(18, undefined, "under-age")\n\t\t}\n\t});\n\n\tPerson.find({ surname: "Doe" }, function (err, people) {\n\t\t// SQL: "SELECT * FROM person WHERE surname = \'Doe\'"\n\n\t\tconsole.log("People found: %d", people.length);\n\t\tconsole.log("First person: %s, age %d", people[0].fullName(), people[0].age);\n\n\t\tpeople[0].age = 16;\n\t\tpeople[0].save(function (err) {\n\t\t\t// err.msg = "under-age";\n\t\t});\n\t});\n});\n```\n\n## Promises\n\nYou can use the [promise enabled wrapper library](https://github.com/rafaelkaufmann/q-orm).\n\n\n## Express\n\nIf you\'re using Express, you might want to use the simple middleware to integrate more easily.\n\n```js\nvar express = require(\'express\');\nvar orm = require(\'orm\');\nvar app = express();\n\napp.use(orm.express("mysql://username:password@host/database", {\n\tdefine: function (db, models, next) {\n\t\tmodels.person = db.define("person", { ... });\n\t\tnext();\n\t}\n}));\napp.listen(80);\n\napp.get("/", function (req, res) {\n\t// req.models is a reference to models used above in define()\n\treq.models.person.find(...);\n});\n```\n\nYou can call `orm.express` more than once to have multiple database connections. Models defined across connections\nwill be joined together in `req.models`. **Don\'t forget to use it before `app.use(app.router)`, preferably right after your\nassets public folder(s).**\n\n## Examples\n\nSee `examples/anontxt` for an example express based app.\n\n## Documentation\n\nDocumentation is moving to the [wiki](https://github.com/dresende/node-orm2/wiki/).\n\n## Settings\n\nSee information in the [wiki](https://github.com/dresende/node-orm2/wiki/Settings).\n\n## Connecting\n\nSee information in the [wiki](https://github.com/dresende/node-orm2/wiki/Connecting-to-Database).\n\n## Models\n\nA Model is an abstraction over one or more database tables. Models support associations (more below). The name of the model is assumed to match the table name.\n\nModels support behaviours for accessing and manipulating table data.\n\n## Defining Models\n\nSee information in the [wiki](https://github.com/dresende/node-orm2/wiki/Defining-Models).\n\n### Properties\n\nSee information in the [wiki](https://github.com/dresende/node-orm2/wiki/Model-Properties).\n\n### Instance Methods\n\nAre passed in during model definition.\n\n```js\nvar Person = db.define(\'person\', {\n    name    : String,\n    surname : String\n}, {\n    methods: {\n        fullName: function () {\n            return this.name + \' \' + this.surname;\n        }\n    }\n});\n\nPerson.get(4, function(err, person) {\n    console.log( person.fullName() );\n})\n```\n\n### Model Methods\n\nAre defined directly on the model.\n\n```js\nvar Person = db.define(\'person\', {\n    name    : String,\n    height  : { type: \'integer\' }\n});\nPerson.tallerThan = function(height, callback) {\n    this.find({ height: orm.gt(height) }, callback);\n};\n\nPerson.tallerThan( 192, function(err, tallPeople) { ... } );\n```\n\n\n## Loading Models\n\nModels can be in separate modules. Simply ensure that the module holding the models uses module.exports to publish a function that accepts the database connection, then load your models however you like.\n\nNote - using this technique you can have cascading loads.\n\n```js\n// your main file (after connecting)\ndb.load("./models", function (err) {\n    // loaded!\n    var Person = db.models.person;\n    var Pet    = db.models.pet;\n});\n\n// models.js\nmodule.exports = function (db, cb) {\n    db.load("./models-extra", function (err) {\n        if (err) {\n            return cb(err);\n        }\n\n        db.define(\'person\', {\n            name : String\n        });\n\n        return cb();\n    });\n};\n\n// models-extra.js\nmodule.exports = function (db, cb) {\n    db.define(\'pet\', {\n        name : String\n    });\n\n    return cb();\n};\n```\n\n## Synchronizing Models\n\nSee information in the [wiki](https://github.com/dresende/node-orm2/wiki/Synching-and-Dropping-Models).\n\n## Dropping Models\n\nSee information in the [wiki](https://github.com/dresende/node-orm2/wiki/Synching-and-Dropping-Models).\n\n## Advanced Options\n\nORM2 allows you some advanced tweaks on your Model definitions. You can configure these via settings or in the call to `define` when you setup the Model.\n\nFor example, each Model instance has a unique ID in the database. This table column is\nby default "id" but you can change it.\n\n```js\nvar Person = db.define("person", {\n\tname : String\n}, {\n\tid   : "person_id"\n});\n\n// or just do it globally..\ndb.settings.set("properties.primary_key", "UID");\n\n// ..and then define your Models\nvar Pet = db.define("pet", {\n\tname : String\n});\n```\n\n**Pet** model will have 2 columns, an `UID` and a `name`.\n\nIt is also possible to have multiple IDs for a model in the database, this is done by specifying an array of IDs to use.\n\n```js\nvar Person = db.define("person", {\n\tfirstname: String,\n\tlastname: String\n}, {\n\tid: [\'firstname\', \'lastname\']\n});\n```\n\nOther options:\n\n- `cache` : (default: `true`) Set it to `false` to disable Instance cache ([Singletons](#singleton)) or set a timeout value (in seconds);\n- `autoSave` : (default: `false`) Set it to `true` to save an Instance right after changing any property;\n- `autoFetch` : (default: `false`) Set it to `true` to fetch associations when fetching an instance from the database;\n- `autoFetchLimit` : (default: `1`) If `autoFetch` is enabled this defines how many hoops (associations of associations)\n  you want it to automatically fetch.\n\n## Hooks\n\nSee information in the [wiki](https://github.com/dresende/node-orm2/wiki/Model-Hooks).\n\n## Finding Items\n\n### Model.get(id, [ options ], cb)\n\nTo get a specific element from the database use `Model.get`.\n\n```js\nPerson.get(123, function (err, person) {\n\t// finds person with id = 123\n});\n```\n\n### Model.find([ conditions ] [, options ] [, limit ] [, order ] [, cb ])\n\nFinding one or more elements has more options, each one can be given in no specific parameter order. Only `options` has to be after `conditions` (even if it\'s an empty object).\n\n```js\nPerson.find({ name: "John", surname: "Doe" }, 3, function (err, people) {\n\t// finds people with name=\'John\' AND surname=\'Doe\' and returns the first 3\n});\n```\n\nIf you need to sort the results because you\'re limiting or just because you want them sorted do:\n\n```js\nPerson.find({ surname: "Doe" }, "name", function (err, people) {\n\t// finds people with surname=\'Doe\' and returns sorted by name ascending\n});\nPerson.find({ surname: "Doe" }, [ "name", "Z" ], function (err, people) {\n\t// finds people with surname=\'Doe\' and returns sorted by name descending\n\t// (\'Z\' means DESC; \'A\' means ASC - default)\n});\n```\n\nThere are more options that you can pass to find something. These options are passed in a second object:\n\n```js\nPerson.find({ surname: "Doe" }, { offset: 2 }, function (err, people) {\n\t// finds people with surname=\'Doe\', skips the first 2 and returns the others\n});\n```\n\nYou can also use raw SQL when searching. It\'s documented in the *Chaining* section below.\n\n### Model.count([ conditions, ] cb)\n\nIf you just want to count the number of items that match a condition you can just use `.count()` instead of finding all\nof them and counting. This will actually tell the database server to do a count (it won\'t be done in the node process itself).\n\n```js\nPerson.count({ surname: "Doe" }, function (err, count) {\n\tconsole.log("We have %d Does in our db", count);\n});\n```\n\n### Model.exists([ conditions, ] cb)\n\nSimilar to `.count()`, this method just checks if the count is greater than zero or not.\n\n```js\nPerson.exists({ surname: "Doe" }, function (err, exists) {\n\tconsole.log("We %s Does in our db", exists ? "have" : "don\'t have");\n});\n```\n\n### Aggregating Functions\n\nIf you need to get some aggregated values from a Model, you can use `Model.aggregate()`. Here\'s an example to better\nillustrate:\n\n```js\nPerson.aggregate({ surname: "Doe" }).min("age").max("age").get(function (err, min, max) {\n\tconsole.log("The youngest Doe guy has %d years, while the oldest is %d", min, max);\n});\n```\n\nAn `Array` of properties can be passed to select only a few properties. An `Object` is also accepted to define conditions.\n\nHere\'s an example to illustrate how to use `.groupBy()`:\n\n```js\n//The same as "select avg(weight), age from person where country=\'someCountry\' group by age;"\nPerson.aggregate(["age"], { country: "someCountry" }).avg("weight").groupBy("age").get(function (err, stats) {\n    // stats is an Array, each item should have \'age\' and \'avg_weight\'\n});\n```\n\n### Base `.aggregate()` methods\n\n- `.limit()`: you can pass a number as a limit, or two numbers as offset and limit respectively\n- `.order()`: same as `Model.find().order()`\n\n### Additional `.aggregate()` methods\n\n- `min`\n- `max`\n- `avg`\n- `sum`\n- `count` (there\'s a shortcut to this - `Model.count`)\n\nThere are more aggregate functions depending on the driver (Math functions for example).\n\n#### Chaining\n\nIf you prefer less complicated syntax you can chain `.find()` by not giving a callback parameter.\n\n```js\nPerson.find({ surname: "Doe" }).limit(3).offset(2).only("name", "surname").run(function (err, people) {\n    // finds people with surname=\'Doe\', skips first 2 and limits to 3 elements,\n    // returning only \'name\' and \'surname\' properties\n});\n```\nIf you want to skip just one or two properties, you can call `.omit()` instead of `.only`.\n\nChaining allows for more complicated queries. For example, we can search by specifying custom SQL:\n```js\nPerson.find({ age: 18 }).where("LOWER(surname) LIKE ?", [\'dea%\']).all( ... );\n```\nIt\'s bad practice to manually escape SQL parameters as it\'s error prone and exposes your application to SQL injection.\nThe `?` syntax takes care of escaping for you, by safely substituting the question mark in the query with the parameters provided.\nYou can also chain multiple `where` clauses as needed.\n\nYou can also `order` or `orderRaw`:\n```js\nPerson.find({ age: 18 }).order(\'-name\').all( ... );\n// see the \'Raw queries\' section below for more details\nPerson.find({ age: 18 }).orderRaw("?? DESC", [\'age\']).all( ... );\n```\n\nYou can also chain and just get the count in the end. In this case, offset, limit and order are ignored.\n\n```js\nPerson.find({ surname: "Doe" }).count(function (err, people) {\n    // people = number of people with surname="Doe"\n});\n```\n\nAlso available is the option to remove the selected items.\nNote that a chained remove will not run any hooks.\n\n```js\nPerson.find({ surname: "Doe" }).remove(function (err) {\n    // Does gone..\n});\n```\n\nYou can also make modifications to your instances using common Array traversal methods and save everything\nin the end.\n\n```js\nPerson.find({ surname: "Doe" }).each(function (person) {\n\tperson.surname = "Dean";\n}).save(function (err) {\n\t// done!\n});\n\nPerson.find({ surname: "Doe" }).each().filter(function (person) {\n\treturn person.age >= 18;\n}).sort(function (person1, person2) {\n\treturn person1.age < person2.age;\n}).get(function (people) {\n\t// get all people with at least 18 years, sorted by age\n});\n```\n\nOf course you could do this directly on `.find()`, but for some more complicated tasks this can be very usefull.\n\n`Model.find()` does not return an Array so you can\'t just chain directly. To start chaining you have to call\n`.each()` (with an optional callback if you want to traverse the list). You can then use the common functions\n`.filter()`, `.sort()` and `.forEach()` more than once.\n\nIn the end (or during the process..) you can call:\n- `.count()` if you just want to know how many items there are;\n- `.get()` to retrieve the list;\n- `.save()` to save all item changes.\n\n#### Conditions\n\nConditions are defined as an object where every key is a property (table column). All keys are supposed\nto be concatenated by the logical `AND`. Values are considered to match exactly, unless you\'re passing\nan `Array`. In this case it is considered a list to compare the property with.\n\n```js\n{ col1: 123, col2: "foo" } // `col1` = 123 AND `col2` = \'foo\'\n{ col1: [ 1, 3, 5 ] } // `col1` IN (1, 3, 5)\n```\n\nIf you need other comparisons, you have to use a special object created by some helper functions. Here are\na few examples to describe it:\n\n```js\n{ col1: orm.eq(123) } // `col1` = 123 (default)\n{ col1: orm.ne(123) } // `col1` <> 123\n{ col1: orm.gt(123) } // `col1` > 123\n{ col1: orm.gte(123) } // `col1` >= 123\n{ col1: orm.lt(123) } // `col1` < 123\n{ col1: orm.lte(123) } // `col1` <= 123\n{ col1: orm.between(123, 456) } // `col1` BETWEEN 123 AND 456\n{ col1: orm.not_between(123, 456) } // `col1` NOT BETWEEN 123 AND 456\n{ col1: orm.like(12 + "%") } // `col1` like \'12%\'\n```\n\n#### Raw queries\n\n```js\ndb.driver.execQuery("SELECT id, email FROM user", function (err, data) { ... })\n\n// You can escape identifiers and values.\n// For identifier substitution use: ??\n// For value substitution use: ?\ndb.driver.execQuery(\n  "SELECT user.??, user.?? FROM user WHERE user.?? LIKE ? AND user.?? > ?",\n  [\'id\', \'name\', \'name\', \'john\', \'id\', 55],\n  function (err, data) { ... }\n)\n\n// Identifiers don\'t need to be scaped most of the time\ndb.driver.execQuery(\n  "SELECT user.id, user.name FROM user WHERE user.name LIKE ? AND user.id > ?",\n  [\'john\', 55],\n  function (err, data) { ... }\n)\n```\n\n### Caching & Integrity\n\nModel instances are cached. If multiple different queries will result in the same result, you will\nget the same object. If you have other systems that can change your database (or you\'re developing and need\nto make some manual changes) you should remove this feature by disabling cache. This can be done when you\'re\ndefining the Model.\n\n```js\nvar Person = db.define(\'person\', {\n\tname    : String\n}, {\n\tcache   : false\n});\n```\n\nand also globally:\n\n```js\norm.connect(\'...\', function(err, db) {\n  db.settings.set(\'instance.cache\', false);\n});\n```\n\nThe cache can be configured to expire after a period of time by passing in a number instead of a\nboolean. The number will be considered the cache timeout in seconds (you can use floating point).\n\n**Note**: One exception about Caching is that it won\'t be used if an instance is not saved. For example, if\nyou fetch a Person and then change it, while it doesn\'t get saved it won\'t be passed from Cache.\n\n## Creating Items\n\n### Model.create(items, cb)\n\nTo insert new elements to the database use `Model.create`.\n\n```js\nPerson.create([\n\t{\n\t\tname: "John",\n\t\tsurname: "Doe",\n\t\tage: 25,\n\t\tmale: true\n\t},\n\t{\n\t\tname: "Liza",\n\t\tsurname: "Kollan",\n\t\tage: 19,\n\t\tmale: false\n\t}\n], function (err, items) {\n\t// err - description of the error or null\n\t// items - array of inserted items\n});\n```\n\n## Updating Items\n\nEvery item returned has the properties that were defined to the Model and also a couple of methods you can\nuse to change each item.\n\n```js\nPerson.get(1, function (err, John) {\n\tJohn.name = "Joe";\n\tJohn.surname = "Doe";\n\tJohn.save(function (err) {\n\t\tconsole.log("saved!");\n\t});\n});\n```\n\nUpdating and then saving an instance can be done in a single call:\n\n```js\nPerson.get(1, function (err, John) {\n\tJohn.save({ name: "Joe", surname: "Doe" }, function (err) {\n\t\tconsole.log("saved!");\n\t});\n});\n```\n\nIf you want to remove an instance, just do:\n\n```js\n// you could do this without even fetching it, look at Chaining section above\nPerson.get(1, function (err, John) {\n\tJohn.remove(function (err) {\n\t\tconsole.log("removed!");\n\t});\n});\n```\n\n## Validations\n\nSee information in the [wiki](https://github.com/dresende/node-orm2/wiki/Model-Validations).\n\n## Associations\n\nAn association is a relation between one or more tables.\n\n### hasOne\n\nIs a **many to one** relationship. It\'s the same as **belongs to.**<br/>\nEg: `Animal.hasOne(\'owner\', Person)`.<br/>\nAnimal can only have one owner, but Person can have many animals.<br/>\nAnimal will have the `owner_id` property automatically added.\n\nThe following functions will become available:\n```js\nanimal.getOwner(function..)         // Gets owner\nanimal.setOwner(person, function..) // Sets owner_id\nanimal.hasOwner(function..)         // Checks if owner exists\nanimal.removeOwner()                // Sets owner_id to 0\n```\n\n**Chain Find**\n\nThe hasOne association is also chain find compatible. Using the example above, we can do this to access a new instance of a ChainFind object:\n\n```js\nAnimal.findByOwner({ /* options */ })\n```\n\n**Reverse access**\n\n```js\nAnimal.hasOne(\'owner\', Person, {reverse: \'pets\'})\n```\n\nwill add the following:\n\n```js\n// Instance methods\nperson.getPets(function..)\nperson.setPets(cat, function..)\n\n// Model methods\nPerson.findByPets({ /* options */ }) // returns ChainFind object\n```\n\n### hasMany\n\nIs a **many to many** relationship (includes join table).<br/>\nEg: `Patient.hasMany(\'doctors\', Doctor, { why: String }, { reverse: \'patients\' })`.<br/>\nPatient can have many different doctors. Each doctor can have many different patients.\n\nThis will create a join table `patient_doctors` when you call `Patient.sync()`:\n\n column name | type\n :-----------|:--------\n patient_id  | Integer\n doctor_id   | Integer\n why         | varchar(255)\n\nThe following functions will be available:\n\n```js\npatient.getDoctors(function..)           // List of doctors\npatient.addDoctors(docs, function...)    // Adds entries to join table\npatient.setDoctors(docs, function...)    // Removes existing entries in join table, adds new ones\npatient.hasDoctors(docs, function...)    // Checks if patient is associated to specified doctors\npatient.removeDoctors(docs, function...) // Removes specified doctors from join table\n\ndoctor.getPatients(function..)\netc...\n\n// You can also do:\npatient.doctors = [doc1, doc2];\npatient.save(...)\n```\n\nTo associate a doctor to a patient:\n\n```js\npatient.addDoctor(surgeon, {why: "remove appendix"}, function(err) { ... } )\n```\n\nwhich will add `{patient_id: 4, doctor_id: 6, why: "remove appendix"}` to the join table.\n\n#### getAccessor\n\nThis accessor in this type of association returns a `ChainFind` if not passing a callback. This means you can\ndo things like:\n\n```js\npatient.getDoctors().order("name").offset(1).run(function (err, doctors), {\n\t// ... all doctors, ordered by name, excluding first one\n});\n```\n\n### extendsTo\n\nIf you want to split maybe optional properties into different tables or collections. Every extension will be in a new table,\nwhere the unique identifier of each row is the main model instance id. For example:\n\n```js\nvar Person = db.define("person", {\n    name : String\n});\nvar PersonAddress = Person.extendsTo("address", {\n    street : String,\n    number : Number\n});\n```\n\nThis will create a table `person` with columns `id` and `name`. The extension will create a table `person_address` with\ncolumns `person_id`, `street` and `number`. The methods available in the `Person` model are similar to an `hasOne`\nassociation. In this example you would be able to call `.getAddress(cb)`, `.setAddress(Address, cb)`, ..\n\n**Note:** you don\'t have to save the result from `Person.extendsTo`. It returns an extended model. You can use it to query\ndirectly this extended table (and even find the related model) but that\'s up to you. If you only want to access it using the\noriginal model you can just discard the return.\n\n### Examples & options\n\nIf you have a relation of 1 to n, you should use `hasOne` (belongs to) association.\n\n```js\nvar Person = db.define(\'person\', {\n    name : String\n});\nvar Animal = db.define(\'animal\', {\n    name : String\n});\nAnimal.hasOne("owner", Person); // creates column \'owner_id\' in \'animal\' table\n\n// get animal with id = 123\nAnimal.get(123, function (err, animal) {\n    // animal is the animal model instance, if found\n    animal.getOwner(function (err, person) {\n        // if animal has really an owner, person points to it\n    });\n});\n```\n\nYou can mark the `owner_id` field as required in the database by specifying the `required` option:\n```js\nAnimal.hasOne("owner", Person, { required: true });\n```\n\nIf you prefer to use another name for the field (owner_id) you can change this parameter in the settings.\n\n```js\ndb.settings.set("properties.association_key", "{field}_{name}"); // {name} will be replaced by \'owner\' and {field} will be replaced by \'id\' in this case\n```\n\n**Note: This has to be done before the association is specified.**\n\nThe `hasMany` associations can have additional properties in the association table.\n\n```js\nvar Person = db.define(\'person\', {\n    name : String\n});\nPerson.hasMany("friends", {\n    rate : Number\n});\n\nPerson.get(123, function (err, John) {\n    John.getFriends(function (err, friends) {\n        // assumes rate is another column on table person_friends\n        // you can access it by going to friends[N].extra.rate\n    });\n});\n```\n\nIf you prefer you can activate `autoFetch`.\nThis way associations are automatically fetched when you get or find instances of a model.\n\n```js\nvar Person = db.define(\'person\', {\n  name : String\n});\nPerson.hasMany("friends", {\n    rate : Number\n}, {\n    autoFetch : true\n});\n\nPerson.get(123, function (err, John) {\n    // no need to do John.getFriends() , John already has John.friends Array\n});\n```\n\nYou can also define this option globally instead of a per association basis.\n\n```js\nvar Person = db.define(\'person\', {\n    name : String\n}, {\n    autoFetch : true\n});\nPerson.hasMany("friends", {\n    rate : Number\n});\n```\n\nAssociations can make calls to the associated Model by using the `reverse` option. For example, if you have an\nassociation from ModelA to ModelB, you can create an accessor in ModelB to get instances from ModelA.\nConfusing? Look at the next example.\n\n```js\nvar Pet = db.define(\'pet\', {\n    name : String\n});\nvar Person = db.define(\'person\', {\n    name : String\n});\nPet.hasOne("owner", Person, {\n    reverse : "pets"\n});\n\nPerson(4).getPets(function (err, pets) {\n    // although the association was made on Pet,\n    // Person will have an accessor (getPets)\n    //\n    // In this example, ORM will fetch all pets\n    // whose owner_id = 4\n});\n```\n\nThis makes even more sense when having `hasMany` associations since you can manage the *many to many*\nassociations from both sides.\n\n```js\nvar Pet = db.define(\'pet\', {\n    name : String\n});\nvar Person = db.define(\'person\', {\n    name : String\n});\nPerson.hasMany("pets", Pet, {\n    bought  : Date\n}, {\n    reverse : "owners"\n});\n\nPerson(1).getPets(...);\nPet(2).getOwners(...);\n```\n',
37 silly resolved     readmeFilename: 'Readme.md',
37 silly resolved     bugs: { url: 'https://github.com/dresende/node-orm2/issues' },
37 silly resolved     _id: 'orm@2.1.7',
37 silly resolved     _from: 'orm@' } ]
38 info install orm@2.1.7 into C:\Users\GeOrge\Documents\Github\NodeJS\MySQL
39 info installOne orm@2.1.7
40 info C:\Users\GeOrge\Documents\Github\NodeJS\MySQL\node_modules\orm unbuild
41 verbose tar unpack C:\Users\GeOrge\AppData\Roaming\npm-cache\orm\2.1.7\package.tgz
42 silly lockFile 18e2a50e-ub-NodeJS-MySQL-node-modules-orm tar://C:\Users\GeOrge\Documents\Github\NodeJS\MySQL\node_modules\orm
43 verbose lock tar://C:\Users\GeOrge\Documents\Github\NodeJS\MySQL\node_modules\orm C:\Users\GeOrge\AppData\Roaming\npm-cache\18e2a50e-ub-NodeJS-MySQL-node-modules-orm.lock
44 silly lockFile 4ad00714--npm-cache-orm-2-1-7-package-tgz tar://C:\Users\GeOrge\AppData\Roaming\npm-cache\orm\2.1.7\package.tgz
45 verbose lock tar://C:\Users\GeOrge\AppData\Roaming\npm-cache\orm\2.1.7\package.tgz C:\Users\GeOrge\AppData\Roaming\npm-cache\4ad00714--npm-cache-orm-2-1-7-package-tgz.lock
46 silly gunzTarPerm modes [ '755', '644' ]
47 silly gunzTarPerm extractEntry package.json
48 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
49 silly gunzTarPerm extractEntry .npmignore
50 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
51 silly gunzTarPerm extractEntry time.js
52 silly gunzTarPerm modified mode [ 'time.js', 438, 420 ]
53 silly gunzTarPerm extractEntry Contributing.md
54 silly gunzTarPerm modified mode [ 'Contributing.md', 438, 420 ]
55 silly gunzTarPerm extractEntry License
56 silly gunzTarPerm modified mode [ 'License', 438, 420 ]
57 silly gunzTarPerm extractEntry Makefile
58 silly gunzTarPerm modified mode [ 'Makefile', 438, 420 ]
59 silly gunzTarPerm extractEntry Readme.md
60 silly gunzTarPerm modified mode [ 'Readme.md', 438, 420 ]
61 silly gunzTarPerm extractEntry .travis.yml
62 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
63 silly gunzTarPerm extractEntry examples/anontxt/package.json
64 silly gunzTarPerm modified mode [ 'examples/anontxt/package.json', 438, 420 ]
65 silly gunzTarPerm extractEntry examples/anontxt/server.js
66 silly gunzTarPerm modified mode [ 'examples/anontxt/server.js', 438, 420 ]
67 silly gunzTarPerm extractEntry examples/anontxt/Readme.md
68 silly gunzTarPerm modified mode [ 'examples/anontxt/Readme.md', 438, 420 ]
69 silly gunzTarPerm extractEntry examples/anontxt/app/controllers/_helpers.js
70 silly gunzTarPerm modified mode [ 'examples/anontxt/app/controllers/_helpers.js', 438, 420 ]
71 silly gunzTarPerm extractEntry examples/anontxt/app/controllers/comments_controller.js
72 silly gunzTarPerm modified mode [ 'examples/anontxt/app/controllers/comments_controller.js',
72 silly gunzTarPerm   438,
72 silly gunzTarPerm   420 ]
73 silly gunzTarPerm extractEntry examples/anontxt/app/controllers/home_controller.js
74 silly gunzTarPerm modified mode [ 'examples/anontxt/app/controllers/home_controller.js',
74 silly gunzTarPerm   438,
74 silly gunzTarPerm   420 ]
75 silly gunzTarPerm extractEntry examples/anontxt/app/controllers/index.js
76 silly gunzTarPerm modified mode [ 'examples/anontxt/app/controllers/index.js', 438, 420 ]
77 silly gunzTarPerm extractEntry examples/anontxt/app/controllers/messages_controller.js
78 silly gunzTarPerm modified mode [ 'examples/anontxt/app/controllers/messages_controller.js',
78 silly gunzTarPerm   438,
78 silly gunzTarPerm   420 ]
79 silly gunzTarPerm extractEntry examples/anontxt/app/models/comment.js
80 silly gunzTarPerm modified mode [ 'examples/anontxt/app/models/comment.js', 438, 420 ]
81 silly gunzTarPerm extractEntry examples/anontxt/app/models/index.js
82 silly gunzTarPerm modified mode [ 'examples/anontxt/app/models/index.js', 438, 420 ]
83 silly gunzTarPerm extractEntry examples/anontxt/app/models/message.js
84 silly gunzTarPerm modified mode [ 'examples/anontxt/app/models/message.js', 438, 420 ]
85 silly gunzTarPerm extractEntry examples/anontxt/config/environment.js
86 silly gunzTarPerm modified mode [ 'examples/anontxt/config/environment.js', 438, 420 ]
87 silly gunzTarPerm extractEntry examples/anontxt/config/routes.js
88 silly gunzTarPerm modified mode [ 'examples/anontxt/config/routes.js', 438, 420 ]
89 silly gunzTarPerm extractEntry examples/anontxt/config/settings.js
90 silly gunzTarPerm modified mode [ 'examples/anontxt/config/settings.js', 438, 420 ]
91 silly gunzTarPerm extractEntry examples/anontxt/public/app.js
92 silly gunzTarPerm modified mode [ 'examples/anontxt/public/app.js', 438, 420 ]
93 silly gunzTarPerm extractEntry examples/anontxt/public/app.css
94 silly gunzTarPerm modified mode [ 'examples/anontxt/public/app.css', 438, 420 ]
95 silly gunzTarPerm extractEntry examples/anontxt/public/index.html
96 silly gunzTarPerm modified mode [ 'examples/anontxt/public/index.html', 438, 420 ]
97 silly gunzTarPerm extractEntry examples/anontxt/script/start
98 silly gunzTarPerm modified mode [ 'examples/anontxt/script/start', 438, 420 ]
99 silly gunzTarPerm extractEntry examples/anontxt/tasks/reset.js
100 silly gunzTarPerm modified mode [ 'examples/anontxt/tasks/reset.js', 438, 420 ]
101 silly gunzTarPerm extractEntry lib/AggregateFunctions.js
102 silly gunzTarPerm modified mode [ 'lib/AggregateFunctions.js', 438, 420 ]
103 silly gunzTarPerm extractEntry lib/Utilities.js
104 silly gunzTarPerm modified mode [ 'lib/Utilities.js', 438, 420 ]
105 silly gunzTarPerm extractEntry lib/Error.js
106 silly gunzTarPerm modified mode [ 'lib/Error.js', 438, 420 ]
107 silly gunzTarPerm extractEntry lib/ErrorCodes.js
108 silly gunzTarPerm modified mode [ 'lib/ErrorCodes.js', 438, 420 ]
109 silly gunzTarPerm extractEntry lib/Express.js
110 silly gunzTarPerm modified mode [ 'lib/Express.js', 438, 420 ]
111 silly gunzTarPerm extractEntry lib/Debug.js
112 silly gunzTarPerm modified mode [ 'lib/Debug.js', 438, 420 ]
113 silly gunzTarPerm extractEntry lib/Singleton.js
114 silly gunzTarPerm modified mode [ 'lib/Singleton.js', 438, 420 ]
115 silly gunzTarPerm extractEntry lib/LazyLoad.js
116 silly gunzTarPerm modified mode [ 'lib/LazyLoad.js', 438, 420 ]
117 silly gunzTarPerm extractEntry lib/Model.js
118 silly gunzTarPerm modified mode [ 'lib/Model.js', 438, 420 ]
119 silly gunzTarPerm extractEntry lib/ORM.js
120 silly gunzTarPerm modified mode [ 'lib/ORM.js', 438, 420 ]
121 silly gunzTarPerm extractEntry lib/Promise.js
122 silly gunzTarPerm modified mode [ 'lib/Promise.js', 438, 420 ]
123 silly gunzTarPerm extractEntry lib/ChainInstance.js
124 silly gunzTarPerm modified mode [ 'lib/ChainInstance.js', 438, 420 ]
125 silly gunzTarPerm extractEntry lib/Property.js
126 silly gunzTarPerm modified mode [ 'lib/Property.js', 438, 420 ]
127 silly gunzTarPerm extractEntry lib/ChainFind.js
128 silly gunzTarPerm modified mode [ 'lib/ChainFind.js', 438, 420 ]
129 silly gunzTarPerm extractEntry lib/Settings.js
130 silly gunzTarPerm modified mode [ 'lib/Settings.js', 438, 420 ]
131 silly gunzTarPerm extractEntry lib/Hook.js
132 silly gunzTarPerm modified mode [ 'lib/Hook.js', 438, 420 ]
133 silly gunzTarPerm extractEntry lib/Validators.js
134 silly gunzTarPerm modified mode [ 'lib/Validators.js', 438, 420 ]
135 silly gunzTarPerm extractEntry lib/Instance.js
136 silly gunzTarPerm modified mode [ 'lib/Instance.js', 438, 420 ]
137 silly gunzTarPerm extractEntry lib/Associations/Extend.js
138 silly gunzTarPerm modified mode [ 'lib/Associations/Extend.js', 438, 420 ]
139 silly gunzTarPerm extractEntry lib/Associations/Many.js
140 silly gunzTarPerm modified mode [ 'lib/Associations/Many.js', 438, 420 ]
141 silly gunzTarPerm extractEntry lib/Associations/One.js
142 silly gunzTarPerm modified mode [ 'lib/Associations/One.js', 438, 420 ]
143 silly gunzTarPerm extractEntry lib/TypeScript/.npmignore
144 silly gunzTarPerm modified mode [ 'lib/TypeScript/.npmignore', 438, 420 ]
145 silly gunzTarPerm extractEntry lib/TypeScript/orm.d.ts
146 silly gunzTarPerm modified mode [ 'lib/TypeScript/orm.d.ts', 438, 420 ]
147 silly gunzTarPerm extractEntry lib/TypeScript/sql-query.d.ts
148 silly gunzTarPerm modified mode [ 'lib/TypeScript/sql-query.d.ts', 438, 420 ]
149 silly gunzTarPerm extractEntry lib/Drivers/aliases.js
150 silly gunzTarPerm modified mode [ 'lib/Drivers/aliases.js', 438, 420 ]
151 silly gunzTarPerm extractEntry lib/Drivers/DDL/SQL.js
152 silly gunzTarPerm modified mode [ 'lib/Drivers/DDL/SQL.js', 438, 420 ]
153 silly gunzTarPerm extractEntry lib/Drivers/DML/_shared.js
154 silly gunzTarPerm modified mode [ 'lib/Drivers/DML/_shared.js', 438, 420 ]
155 silly gunzTarPerm extractEntry lib/Drivers/DML/mongodb.js
156 silly gunzTarPerm modified mode [ 'lib/Drivers/DML/mongodb.js', 438, 420 ]
157 silly gunzTarPerm extractEntry lib/Drivers/DML/mysql.js
158 silly gunzTarPerm modified mode [ 'lib/Drivers/DML/mysql.js', 438, 420 ]
159 silly gunzTarPerm extractEntry lib/Drivers/DML/postgres.js
160 silly gunzTarPerm modified mode [ 'lib/Drivers/DML/postgres.js', 438, 420 ]
161 silly gunzTarPerm extractEntry lib/Drivers/DML/redshift.js
162 silly gunzTarPerm modified mode [ 'lib/Drivers/DML/redshift.js', 438, 420 ]
163 silly gunzTarPerm extractEntry lib/Drivers/DML/sqlite.js
164 silly gunzTarPerm modified mode [ 'lib/Drivers/DML/sqlite.js', 438, 420 ]
165 silly gunzTarPerm extractEntry transaction.patch
166 silly gunzTarPerm modified mode [ 'transaction.patch', 438, 420 ]
167 silly gunzTarPerm extractEntry time.coffee
168 silly gunzTarPerm modified mode [ 'time.coffee', 438, 420 ]
169 silly gunzTarPerm extractEntry Changelog.md
170 silly gunzTarPerm modified mode [ 'Changelog.md', 438, 420 ]
171 silly gunzTarPerm extractEntry after-load.patch
172 silly gunzTarPerm modified mode [ 'after-load.patch', 438, 420 ]
173 silly lockFile 18e2a50e-ub-NodeJS-MySQL-node-modules-orm tar://C:\Users\GeOrge\Documents\Github\NodeJS\MySQL\node_modules\orm
174 silly lockFile 18e2a50e-ub-NodeJS-MySQL-node-modules-orm tar://C:\Users\GeOrge\Documents\Github\NodeJS\MySQL\node_modules\orm
175 silly lockFile 4ad00714--npm-cache-orm-2-1-7-package-tgz tar://C:\Users\GeOrge\AppData\Roaming\npm-cache\orm\2.1.7\package.tgz
176 silly lockFile 4ad00714--npm-cache-orm-2-1-7-package-tgz tar://C:\Users\GeOrge\AppData\Roaming\npm-cache\orm\2.1.7\package.tgz
177 info preinstall orm@2.1.7
178 verbose readDependencies using package.json deps
179 verbose readDependencies using package.json deps
180 verbose cache add [ 'enforce@0.1.2', null ]
181 verbose cache add name=undefined spec="enforce@0.1.2" args=["enforce@0.1.2",null]
182 verbose parsed url { protocol: null,
182 verbose parsed url   slashes: null,
182 verbose parsed url   auth: null,
182 verbose parsed url   host: null,
182 verbose parsed url   port: null,
182 verbose parsed url   hostname: null,
182 verbose parsed url   hash: null,
182 verbose parsed url   search: null,
182 verbose parsed url   query: null,
182 verbose parsed url   pathname: 'enforce@0.1.2',
182 verbose parsed url   path: 'enforce@0.1.2',
182 verbose parsed url   href: 'enforce@0.1.2' }
183 verbose cache add name="enforce" spec="0.1.2" args=["enforce","0.1.2"]
184 verbose parsed url { protocol: null,
184 verbose parsed url   slashes: null,
184 verbose parsed url   auth: null,
184 verbose parsed url   host: null,
184 verbose parsed url   port: null,
184 verbose parsed url   hostname: null,
184 verbose parsed url   hash: null,
184 verbose parsed url   search: null,
184 verbose parsed url   query: null,
184 verbose parsed url   pathname: '0.1.2',
184 verbose parsed url   path: '0.1.2',
184 verbose parsed url   href: '0.1.2' }
185 verbose addNamed [ 'enforce', '0.1.2' ]
186 verbose addNamed [ '0.1.2', '0.1.2' ]
187 silly lockFile 40ac6846-enforce-0-1-2 enforce@0.1.2
188 verbose lock enforce@0.1.2 C:\Users\GeOrge\AppData\Roaming\npm-cache\40ac6846-enforce-0-1-2.lock
189 verbose cache add [ 'sql-query@0.1.16', null ]
190 verbose cache add name=undefined spec="sql-query@0.1.16" args=["sql-query@0.1.16",null]
191 verbose parsed url { protocol: null,
191 verbose parsed url   slashes: null,
191 verbose parsed url   auth: null,
191 verbose parsed url   host: null,
191 verbose parsed url   port: null,
191 verbose parsed url   hostname: null,
191 verbose parsed url   hash: null,
191 verbose parsed url   search: null,
191 verbose parsed url   query: null,
191 verbose parsed url   pathname: 'sql-query@0.1.16',
191 verbose parsed url   path: 'sql-query@0.1.16',
191 verbose parsed url   href: 'sql-query@0.1.16' }
192 verbose cache add name="sql-query" spec="0.1.16" args=["sql-query","0.1.16"]
193 verbose parsed url { protocol: null,
193 verbose parsed url   slashes: null,
193 verbose parsed url   auth: null,
193 verbose parsed url   host: null,
193 verbose parsed url   port: null,
193 verbose parsed url   hostname: null,
193 verbose parsed url   hash: null,
193 verbose parsed url   search: null,
193 verbose parsed url   query: null,
193 verbose parsed url   pathname: '0.1.16',
193 verbose parsed url   path: '0.1.16',
193 verbose parsed url   href: '0.1.16' }
194 verbose addNamed [ 'sql-query', '0.1.16' ]
195 verbose addNamed [ '0.1.16', '0.1.16' ]
196 silly lockFile 8ef08565-sql-query-0-1-16 sql-query@0.1.16
197 verbose lock sql-query@0.1.16 C:\Users\GeOrge\AppData\Roaming\npm-cache\8ef08565-sql-query-0-1-16.lock
198 verbose cache add [ 'sql-ddl-sync@git://github.com/dresende/node-sql-ddl-sync.git#v0.3.0',
198 verbose cache add   null ]
199 verbose cache add name=undefined spec="sql-ddl-sync@git://github.com/dresende/node-sql-ddl-sync.git#v0.3.0" args=["sql-ddl-sync@git://github.com/dresende/node-sql-ddl-sync.git#v0.3.0",null]
200 verbose parsed url { protocol: null,
200 verbose parsed url   slashes: null,
200 verbose parsed url   auth: null,
200 verbose parsed url   host: null,
200 verbose parsed url   port: null,
200 verbose parsed url   hostname: null,
200 verbose parsed url   hash: '#v0.3.0',
200 verbose parsed url   search: null,
200 verbose parsed url   query: null,
200 verbose parsed url   pathname: 'sql-ddl-sync@git://github.com/dresende/node-sql-ddl-sync.git',
200 verbose parsed url   path: 'sql-ddl-sync@git://github.com/dresende/node-sql-ddl-sync.git',
200 verbose parsed url   href: 'sql-ddl-sync@git://github.com/dresende/node-sql-ddl-sync.git#v0.3.0' }
201 verbose cache add [ 'hat@0.0.3', null ]
202 verbose cache add name=undefined spec="hat@0.0.3" args=["hat@0.0.3",null]
203 verbose parsed url { protocol: null,
203 verbose parsed url   slashes: null,
203 verbose parsed url   auth: null,
203 verbose parsed url   host: null,
203 verbose parsed url   port: null,
203 verbose parsed url   hostname: null,
203 verbose parsed url   hash: null,
203 verbose parsed url   search: null,
203 verbose parsed url   query: null,
203 verbose parsed url   pathname: 'hat@0.0.3',
203 verbose parsed url   path: 'hat@0.0.3',
203 verbose parsed url   href: 'hat@0.0.3' }
204 verbose cache add name="hat" spec="0.0.3" args=["hat","0.0.3"]
205 verbose parsed url { protocol: null,
205 verbose parsed url   slashes: null,
205 verbose parsed url   auth: null,
205 verbose parsed url   host: null,
205 verbose parsed url   port: null,
205 verbose parsed url   hostname: null,
205 verbose parsed url   hash: null,
205 verbose parsed url   search: null,
205 verbose parsed url   query: null,
205 verbose parsed url   pathname: '0.0.3',
205 verbose parsed url   path: '0.0.3',
205 verbose parsed url   href: '0.0.3' }
206 verbose addNamed [ 'hat', '0.0.3' ]
207 verbose addNamed [ '0.0.3', '0.0.3' ]
208 silly lockFile cd1be7c0-hat-0-0-3 hat@0.0.3
209 verbose lock hat@0.0.3 C:\Users\GeOrge\AppData\Roaming\npm-cache\cd1be7c0-hat-0-0-3.lock
210 verbose cache add [ 'lodash@2.4.1', null ]
211 verbose cache add name=undefined spec="lodash@2.4.1" args=["lodash@2.4.1",null]
212 verbose parsed url { protocol: null,
212 verbose parsed url   slashes: null,
212 verbose parsed url   auth: null,
212 verbose parsed url   host: null,
212 verbose parsed url   port: null,
212 verbose parsed url   hostname: null,
212 verbose parsed url   hash: null,
212 verbose parsed url   search: null,
212 verbose parsed url   query: null,
212 verbose parsed url   pathname: 'lodash@2.4.1',
212 verbose parsed url   path: 'lodash@2.4.1',
212 verbose parsed url   href: 'lodash@2.4.1' }
213 verbose cache add name="lodash" spec="2.4.1" args=["lodash","2.4.1"]
214 verbose parsed url { protocol: null,
214 verbose parsed url   slashes: null,
214 verbose parsed url   auth: null,
214 verbose parsed url   host: null,
214 verbose parsed url   port: null,
214 verbose parsed url   hostname: null,
214 verbose parsed url   hash: null,
214 verbose parsed url   search: null,
214 verbose parsed url   query: null,
214 verbose parsed url   pathname: '2.4.1',
214 verbose parsed url   path: '2.4.1',
214 verbose parsed url   href: '2.4.1' }
215 verbose addNamed [ 'lodash', '2.4.1' ]
216 verbose addNamed [ '2.4.1', '2.4.1' ]
217 silly lockFile 8502be2a-lodash-2-4-1 lodash@2.4.1
218 verbose lock lodash@2.4.1 C:\Users\GeOrge\AppData\Roaming\npm-cache\8502be2a-lodash-2-4-1.lock
219 verbose cache add name="sql-ddl-sync" spec="git://github.com/dresende/node-sql-ddl-sync.git#v0.3.0" args=["sql-ddl-sync","git://github.com/dresende/node-sql-ddl-sync.git#v0.3.0"]
220 verbose parsed url { protocol: 'git:',
220 verbose parsed url   slashes: true,
220 verbose parsed url   auth: null,
220 verbose parsed url   host: 'github.com',
220 verbose parsed url   port: null,
220 verbose parsed url   hostname: 'github.com',
220 verbose parsed url   hash: '#v0.3.0',
220 verbose parsed url   search: null,
220 verbose parsed url   query: null,
220 verbose parsed url   pathname: '/dresende/node-sql-ddl-sync.git',
220 verbose parsed url   path: '/dresende/node-sql-ddl-sync.git',
220 verbose parsed url   href: 'git://github.com/dresende/node-sql-ddl-sync.git#v0.3.0' }
221 silly lockFile 5a32b6ae-m-dresende-node-sql-ddl-sync-git git://github.com/dresende/node-sql-ddl-sync.git
222 verbose lock git://github.com/dresende/node-sql-ddl-sync.git C:\Users\GeOrge\AppData\Roaming\npm-cache\5a32b6ae-m-dresende-node-sql-ddl-sync-git.lock
223 verbose url raw enforce/0.1.2
224 verbose url resolving [ 'https://registry.npmjs.org/', './enforce/0.1.2' ]
225 verbose url resolved https://registry.npmjs.org/enforce/0.1.2
226 info trying registry request attempt 1 at 20:47:49
227 verbose etag "1QSLFIDFV3SGDUWFNWWO9K7MQ"
228 http GET https://registry.npmjs.org/enforce/0.1.2
229 verbose url raw sql-query/0.1.16
230 verbose url resolving [ 'https://registry.npmjs.org/', './sql-query/0.1.16' ]
231 verbose url resolved https://registry.npmjs.org/sql-query/0.1.16
232 info trying registry request attempt 1 at 20:47:49
233 verbose etag "BXBE5ZQ3BEVDMBPDGOTVX3PI2"
234 http GET https://registry.npmjs.org/sql-query/0.1.16
235 verbose url raw hat/0.0.3
236 verbose url resolving [ 'https://registry.npmjs.org/', './hat/0.0.3' ]
237 verbose url resolved https://registry.npmjs.org/hat/0.0.3
238 info trying registry request attempt 1 at 20:47:49
239 verbose etag "A1429P6NCD4NFJHKPJ0FG47O7"
240 http GET https://registry.npmjs.org/hat/0.0.3
241 verbose addRemoteGit [ 'git://github.com/dresende/node-sql-ddl-sync.git', 'v0.3.0' ]
242 verbose url raw lodash/2.4.1
243 verbose url resolving [ 'https://registry.npmjs.org/', './lodash/2.4.1' ]
244 verbose url resolved https://registry.npmjs.org/lodash/2.4.1
245 info trying registry request attempt 1 at 20:47:49
246 verbose etag "DIJNS3320X1A7L4XAORFK1V0G"
247 http GET https://registry.npmjs.org/lodash/2.4.1
248 silly lockFile 5a32b6ae-m-dresende-node-sql-ddl-sync-git git://github.com/dresende/node-sql-ddl-sync.git
249 silly lockFile 5a32b6ae-m-dresende-node-sql-ddl-sync-git git://github.com/dresende/node-sql-ddl-sync.git
250 verbose about to build C:\Users\GeOrge\Documents\Github\NodeJS\MySQL\node_modules\orm
251 info C:\Users\GeOrge\Documents\Github\NodeJS\MySQL\node_modules\orm unbuild
252 info preuninstall orm@2.1.7
253 info uninstall orm@2.1.7
254 verbose true,C:\Users\GeOrge\Documents\Github\NodeJS\MySQL\node_modules,C:\Users\GeOrge\Documents\Github\NodeJS\MySQL\node_modules unbuild orm@2.1.7
255 info postuninstall orm@2.1.7
256 error not found: git
257 error Failed using git.
257 error This is most likely not a problem with npm itself.
257 error Please check if you have git installed and in your PATH.
258 error System Windows_NT 6.1.7600
259 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "orm"
260 error cwd C:\Users\GeOrge\Documents\Github\NodeJS\MySQL
261 error node -v v0.10.26
262 error npm -v 1.4.3
263 error code ENOGIT
264 verbose exit [ 1, true ]
